name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get current release version
        id: get_current_release
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name' > current_version.txt
        continue-on-error: true

      - name: Read package.json version
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        run: |
          if [ -f current_version.txt ]; then
            CURRENT_VERSION=$(cat current_version.txt)
          else
            CURRENT_VERSION="v0.0.0"
          fi
          if [ "$CURRENT_VERSION" != "v${PACKAGE_VERSION}" ]; then
            echo "版本已更新，准备发布新版本。"
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "未检测到版本变更。"
            echo "release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Configure Git
        if: steps.compare_versions.outputs.release == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Add package.json and commit changes
        if: steps.compare_versions.outputs.release == 'true'
        run: |
          git add package.json
          git commit -m "版本更新至 ${{ env.PACKAGE_VERSION }}" || echo "没有需要提交的更改"

      - name: Delete existing tag if exists
        if: steps.compare_versions.outputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.read_package_version.outputs.version }}
          git tag -d v$NEW_VERSION 2>/dev/null || true
          git push origin :refs/tags/v$NEW_VERSION 2>/dev/null || true

      - name: Create and push tag
        if: steps.compare_versions.outputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.read_package_version.outputs.version }}
          git tag v$NEW_VERSION
          git push origin main --tags

      - name: Create Release
        if: steps.compare_versions.outputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.read_package_version.outputs.version }}
          release_name: v${{ steps.read_package_version.outputs.version }}